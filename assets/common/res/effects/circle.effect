// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  vec4 vert() {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    return pos;
  } 
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_CIRCLE
  uniform CircleRadius {
    vec4 f4_borders;
    float f4_radius;
    float f4_widthInPixel;
    float f4_heightInPixel;
  };
  #endif

  vec4 frag() {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif

      #if USE_CIRCLE
        float f_width = abs(f4_borders[1] - f4_borders[0]);
        float f_height = abs( f4_borders[3] - f4_borders[2] );
        float f_centerU = f_width / 2.0 + f4_borders[0];
        float f_centerV =  f_height / 2.0 + f4_borders[2];
        vec2 centerUv = vec2(f_centerU, f_centerV);
        vec2 toCenter = centerUv - v_uv0;
        float dis = sqrt(pow(toCenter.x * f4_widthInPixel, 2.0) + pow(toCenter.y * f4_heightInPixel, 2.0));
        if (dis > f4_radius) {
          discard;
        }
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%
