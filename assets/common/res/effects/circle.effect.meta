{
  "ver": "1.0.25",
  "uuid": "bb8e378a-f325-4d07-9449-8c8c12560480",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_CIRCLE\nuniform vec4 f4_borders;\nuniform float f4_radius;\nuniform float f4_widthInPixel;\nuniform float f4_heightInPixel;\n#endif\nvec4 frag() {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n    #if USE_CIRCLE\n      float f_width = abs(f4_borders[1] - f4_borders[0]);\n      float f_height = abs( f4_borders[3] - f4_borders[2] );\n      float f_centerU = f_width / 2.0 + f4_borders[0];\n      float f_centerV =  f_height / 2.0 + f4_borders[2];\n      vec2 centerUv = vec2(f_centerU, f_centerV);\n      vec2 toCenter = centerUv - v_uv0;\n      float dis = sqrt(pow(toCenter.x * f4_widthInPixel, 2.0) + pow(toCenter.y * f4_heightInPixel, 2.0));\n      if (dis > f4_radius) {\n        discard;\n      }\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_CIRCLE\nuniform CircleRadius {\n  vec4 f4_borders;\n  float f4_radius;\n  float f4_widthInPixel;\n  float f4_heightInPixel;\n};\n#endif\nvec4 frag() {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n    #if USE_CIRCLE\n      float f_width = abs(f4_borders[1] - f4_borders[0]);\n      float f_height = abs( f4_borders[3] - f4_borders[2] );\n      float f_centerU = f_width / 2.0 + f4_borders[0];\n      float f_centerV =  f_height / 2.0 + f4_borders[2];\n      vec2 centerUv = vec2(f_centerU, f_centerV);\n      vec2 toCenter = centerUv - v_uv0;\n      float dis = sqrt(pow(toCenter.x * f4_widthInPixel, 2.0) + pow(toCenter.y * f4_heightInPixel, 2.0));\n      if (dis > f4_radius) {\n        discard;\n      }\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  return o;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      }
    }
  ],
  "subMetas": {}
}