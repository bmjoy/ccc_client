// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: grid-vs:vert
      frag: grid-fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        gridSize: {value:[100.0, 100.0]}
}%


CCProgram grid-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  out vec4 wp;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    #if CC_USE_MODEL
    wp = cc_matWorld * pos;
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    wp = pos;
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    return pos;
  }
}%


CCProgram grid-fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_EFFECT
  uniform GridType {
    vec2 gridSize;
  };
  in vec4 wp;
  #endif

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);


    #if USE_TEXTURE
    vec2 uv = v_uv0;
      #if USE_EFFECT
      vec2 gridOffset = vec2(mod(wp.x , gridSize.x), mod(wp.y , gridSize.y));
      vec2 offsetUv = vec2(gridOffset.x / gridSize.x, 1.0 - gridOffset.y / gridSize.y);
      uv = offsetUv;
      #endif
    o *= texture(texture, uv);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%
